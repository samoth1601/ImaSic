//henter chordprogression for blokken og konverterer denne fra romerske tall til integers.
        int[] progressionInts = getNumbersFromRoman(progressionRoman);



        //lager en sekvens av 16 noter, fordelt på 4 bolker.
        for (int i = 0; i < 4; i++) {

            //første note av 16 skal være lik grunnote i første chord.
            //******* BOLK1 *******
            if (i==0){
                patternString+= possibleLandingNotes.get(0);

                for (int j = 0; j < 3; j++) {
                    //legger inn prosentvis sjanse for at han tar pause.
                    //legger til 1/4 pause.
                    int chance = 50;
                    if (section.equals("basis")){
                        chance=60;
                    }else{
                        chance=30;
                    }

                    //Hvis det tilfeldigvis blir pause, legg til pause
                    if (rnd.nextInt(100)>chance) {
                        patternString+= "rs ";
                    }else{ //eller legg til en random note fra skalaen.
                        patternString += scale.get(rnd.nextInt(scale.size()));
                    }
                }
                System.out.println(i +": "+ patternString);

                //******* BOLK 2, 3, 4 *******
            }else {

                boolean hasPaused = false;
                //etter første 4-er blokk
                for (int j = 0; j < 4; j++) {


                    //første note av 4er-blokken skal være lik en av tonene som er i akkorden som spilles.
                    if (j == 0) {

                        //finne hvilken akkord som spilles.
                        int activeChordInt = progressionInts[i];
                        //finne aktiv skala for key
                        //var scale
                        //henter ut mulige noter som skal spilles basert på hvilken chord som spilles og i keyen.
                        ArrayList<String> possibleFirstNotesFromChord = new ArrayList<String>();
                        int progressionIntInt = progressionInts[i];
                        int k = 0;

                        if (progressionIntInt != 3 || progressionIntInt != 6){
                            possibleFirstNotesFromChord.add(possibleLandingNotes.get(progressionIntInt));
                            k++;
                        }
                        if (progressionIntInt+2 != 3 || progressionIntInt+2 != 6){
                            possibleFirstNotesFromChord.add(possibleLandingNotes.get((progressionIntInt+2)%7));
                            k++;
                        }
                        if (progressionIntInt+4 != 3 || progressionIntInt+4 != 6){
                            possibleFirstNotesFromChord.add(possibleLandingNotes.get((progressionIntInt+4)%7));
                        }

                        /*possibleFirstNotesFromChord[0] = possibleLandingNotes.get(progressionIntInt);
                        possibleFirstNotesFromChord[1] = possibleLandingNotes.get((progressionIntInt+(2))%7);
                        possibleFirstNotesFromChord[2] = possibleLandingNotes.get((progressionIntInt+(4))%7);
*/
                        patternString+=possibleFirstNotesFromChord.get(rnd.nextInt(possibleFirstNotesFromChord.size()));

                    }else if(j == 1) {
                        //legger inn prosentvis sjanse for at han tar pause denne runden.
                        //legger til 3/4 pause.
                        int chance = 50;
                        if (section.equals("basis")){
                            chance=80;
                        }else{
                            chance=70;
                        }

                        if (rnd.nextInt(100)>chance) {
                            patternString+= "rs rs rs ";
                            hasPaused = true;
                        }
                    }if (j>0 && !hasPaused) {
                        //legger inn prosentvis sjanse for at han tar pause.
                        //legger til 1/4 pause.
                        int chance = 50;
                        if (section.equals("basis")){
                            chance=60;
                        }else{
                            chance=20;
                        }

                        //Hvis det tilfeldigvis blir pause, legg til pause
                        if (rnd.nextInt(100)>chance) {
                            patternString+= "rs ";
                        }else{ //eller legg til en random note fra skalaen.
                            patternString += scale.get(rnd.nextInt(scale.size()));
                        }
                    }
                }
                System.out.println(i +": "+ patternString);
            }
        }
        System.out.println("Det som spilles: " + patternString);

